// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  habits    String?  // User preferences for AI task sorting
  profilePicture String?  // Profile picture URL or base64 data
  telegramBotToken String?  // Telegram bot token for notifications
  telegramUserId String?    // User's Telegram numeric ID
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks     Task[]
  noteTopics NoteTopic[]
  journalEntries JournalEntry[]

  @@map("users")
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  priority    Priority  @default(MEDIUM)
  isCompleted Boolean   @default(false)
  notifyAt    DateTime? // When to send notification (can be before dueDate)
  notificationSent Boolean @default(false) // Track if notification was sent
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign Keys
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model NoteTopic {
  id        String   @id @default(cuid())
  topic     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  entries   NoteEntry[]

  @@map("note_topics")
}

model NoteEntry {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  topicId   String
  topic     NoteTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@map("note_entries")
}

model JournalEntry {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

enum Priority {
  LOW
  MEDIUM
  HIGH

  @@map("priority")
}

enum UserRole {
  USER
  ADMIN

  @@map("user_role")
}
